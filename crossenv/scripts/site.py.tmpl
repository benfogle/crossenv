# Import only what we absolutely need before the path fixup

# First a guard: If we left these environment variables in place we might
# have messed with another Python installation. It's broken beyond repair
# by this point in the startup process, but we can at least offer a helpful
# warning...and who knows, it might still work, mostly.
# There's also a chance that this is python2 we've messed with, so don't
# import os, which can cause a SyntaxError.
import sys
import posix
_sentinel = posix.environ.get(b'PYTHON_CROSSENV')
if _sentinel != b"%(context.sentinel)d":
    print("*******************************************************")
    print("* Crossenv has leaked into another Python interpreter!")
    print("* You should probably file a bug report.")
    print("* Version %%s" %% sys.version)
    print("* Executable %%s" %% sys.executable)
    print("*******************************************************")

import os
import importlib.machinery

os.environ['PYTHON_CROSSENV'] = 'x'

# To prevent the above scenario from playing out every time run a script that
# starts with #!/usr/bin/python, we need to remove the environment variables so
# subprocesses won't see them.  Unfortunately, we still need them after
# startup. Our solution is to force the C environment and os.environ to
# diverge. This can still break in some situations where subprocess.Popen is
# called with env=..., but the solution to that is to monkey patch subprocess.
# We'll try not to do that unless we really have to.
for name in ['_PYTHON_PROJECT_BASE', '_PYTHON_HOST_PLATFORM',
             '_PYTHON_SYSCONFIGDATA_NAME', 'PYTHONHOME', 'PYTHONPATH']:
    # This is the same as os.putenv/os.unsetenv, but I want to be clear that
    # I'm trying to break something.
    try:
        os.environ.putenv(name, os.environ['_OLD_' + name])
        del os.environ['_OLD_' + name]
    except KeyError:
        os.environ.unsetenv(name)


# sysconfig isn't _quite_ set up right, because it queries from a not-yet fixed
# sys module. The variables that come from build_time_vars are correct, so
# we can safely use those. We'll re-import it later once sys is fixed.
import sysconfig

# Fixup paths so we can import packages installed on the build
# system correctly.
sys.cross_compiling = 'crossenv'
sys.build_path = %(context.build_sys_path)r

abiflags = sysconfig.get_config_var('ABIFLAGS')
if abiflags is None:
    try:
        del sys.abiflags
    except AttributeError:
        pass
else:
    sys.abiflags = abiflags

stdlib = os.path.normpath(sysconfig.get_path('stdlib'))

class BuildPathFinder(importlib.machinery.PathFinder):
    """This class exists because we want to hide our modifications to
    sys.path so that pip/setuptools/etc. don't find build-python
    packages when deciding what to install."""
    @classmethod
    def find_spec(cls, fullname, path=None, target=None):
        if path is None:
            # Need to do this every time in case sys.path changes.
            # We insert build paths just before the host stdlibs
            path = []
            for i, p in enumerate(sys.path):
                if p.startswith(stdlib):
                    path.extend(sys.build_path)
                    path.extend(sys.path[i:])
                    break
                else:
                    path.append(p)
        return super().find_spec(fullname, path, target)

# Insert just before the regular sys.path handler
for i, meta in enumerate(sys.meta_path):
    if meta is importlib.machinery.PathFinder:
        sys.meta_path[i] = BuildPathFinder
        break
else:
    sys.meta_path.append(BuildPathFinder) #???

# Remove this directory. It's not needed after startup.
# The one after will be one of ours too.
cross_dir = os.path.dirname(__file__)
for index, p in enumerate(sys.path):
    if os.path.exists(p) and os.path.samefile(p, cross_dir):
        del sys.path[index:index+2]
        break


# A this point we can import more things
from configparser import ConfigParser
from collections import namedtuple
from functools import wraps
config = ConfigParser()
config.read(%(context.crossenv_cfg)r)

# Fixup sys:
# sysconfig should be correct, but some little parts of
# sys are hardcoded (but changable)
multiarch = sysconfig.get_config_var('MULTIARCH')
if multiarch is None:
    try:
        del sys.implementation._multiarch
    except AttributeError:
        pass
else:
    sys.implementation._multiarch = multiarch

# Fixup os.uname, which should fix most of platform module
uname_result_type = namedtuple('uname_result',
        'sysname nodename release version machine')
uname_result = uname_result_type(
        config.get('uname', 'sysname', fallback=''),
        config.get('uname', 'nodename', fallback=''),
        config.get('uname', 'release', fallback=''),
        config.get('uname', 'version', fallback=''),
        config.get('uname', 'machine', fallback=''))

@wraps(os.uname)
def uname():
    return uname_result
os.uname = uname

# Fixup platform
import platform
processor = config.get('uname', 'processor', fallback=None)
if processor is None:
    processor = config.get('uname', 'machine', fallback=None)
uname_result2 = platform.uname_result(
        config.get('uname', 'sysname', fallback=''),
        config.get('uname', 'nodename', fallback=''),
        config.get('uname', 'release', fallback=''),
        config.get('uname', 'version', fallback=''),
        config.get('uname', 'machine', fallback=''),
        processor)
@wraps(platform.uname)
def uname2():
    return uname_result2
platform.uname = uname2

sys.platform = uname_result2.system.lower()

if hasattr(platform, '_linux_distribution'):
    @wraps(platform._linux_distribution)
    def dist(*args, **kwargs):
        return ('', '', '')
    platform._linux_distribution = dist

@wraps(platform.libc_ver)
def libc_ver(*args, **kwargs):
    return ('', '')
platform.libc_ver = libc_ver

# importlib.reload would probably work, but just to be safe we'll try to 
# have the modules' __dict__ completely clean.
del sys.modules['site']
del sys.modules['sysconfig']
import site
import sysconfig
import distutils.sysconfig
sysconfig.get_config_vars() # Force init
distutils.sysconfig.get_config_vars() # Force init

# Now that sysconfig is set up, remove a few environment variables completely.
# If someone (setuptools!) calls subprocess.Popen with env=os.environ.copy(),
# it will break subprocesses because 'python3 -I', as in the wrapper script,
# doesn't prevent these from being used.
for name in ('_PYTHON_PROJECT_BASE', '_PYTHON_HOST_PLATFORM',
        '_PYTHON_SYSCONFIGDATA_NAME'):
    if name in os.environ:
        del os.environ[name]

# Now modify sys.path in a way that we can selectivly let setuptools know
# about packages in build-python. This won't change how things are imported:
# just whether or not setuptools thinks they are installed.
try:
    import pkg_resources
    _EXPOSED_LIBS = os.path.realpath(%(context.exposed_libs)r)
    _ALLOWED = set()
    try:
        with open(_EXPOSED_LIBS, 'r') as fp:
            for line in fp:
                allow = line.split('#',1)[0].strip()
                if allow:
                    _ALLOWED.add(allow)
    except IOError:
        pass

    class BuildPathEntryFinder:
        def __init__(self, path):
            if os.path.realpath(path) != _EXPOSED_LIBS:
                raise ImportError()

        def invalidate_caches(cls):
            pass

        def find_module(self, fullname):
            return None

        def find_loader(self, fullname):
            return None, []

        def find_spec(self, fullname, target=None):
            return None

    def find_on_build_path(importer, path_item, only=False):
        for path in sys.build_path:
            for dist in pkg_resources.find_on_path(importer, path, only):
                if dist.project_name in _ALLOWED:
                    yield dist

    sys.path_hooks.append(BuildPathEntryFinder)
    sys.path.append(_EXPOSED_LIBS)
    pkg_resources.register_finder(BuildPathEntryFinder, find_on_build_path)
    pkg_resources.working_set.add_entry(_EXPOSED_LIBS)
except ImportError:
    pass
